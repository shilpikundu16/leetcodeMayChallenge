/** link to day 16 problem: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3331/

Approach:  We divide the entire linked list into  2 linked lists, one odd and other even.
          Then we link the even list to the tail of the odd list.
          
Time complexity : O(n) where there are total n nodes and we visit each node once. 
Space complexity : O(1) as all we need are the pointers.  */



class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head==null)  return null;
        
        ListNode odd= head;
        ListNode even=head.next;
        ListNode evenHead= head.next;
        
        while(even!=null && even.next!=null){
            odd.next= even.next;
            odd= even.next;
            even.next= odd.next;
            even= even.next;       
        }
        odd.next= evenHead;
        return head;
        
    }
}
