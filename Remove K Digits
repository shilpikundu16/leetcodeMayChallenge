/** link to day 13 problem: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3328/
Approach: After observing the pattern, we find that if all the digits are in increasing order than we will delete the last digit ,
          otherwise we will delete a digit for which next digit is smaller. Also we need to remove all leading zeroes, before
          return the number.

Time Complexity: O(kn) , where k is the count of numbers to be removed and n is the length of string.
Space Complexity: O(1) as we are not using any extra space. */


class Solution {
    public String removeKdigits(String num, int k) {
        if (num.length() == k) {
            return "0";
        }
        StringBuilder sb = new StringBuilder(num);
        
        /* Removing the digit for which the next digit is smaller. If reached the end, then removing last digit.*/
        for (int j = 0; j < k; j ++) {
            int i = 0;
            while (i < sb.length() - 1 && sb.charAt(i) <= sb.charAt(i + 1)) {
                i ++;
            }
            sb.delete(i, i + 1);
        }
        int i = 0;
        //leading zeroes removed
        while (i < sb.length() - 1 && sb.charAt(i) == '0') {
            i ++;
        }
        return sb.toString().substring(i);
    }
}
