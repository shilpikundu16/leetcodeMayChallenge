/* Link to day 7 problem: https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/534/week-1-may-1st-may-7th/3322/
 In this  problem ,the two main things to ensure are:
 1)Both the nodes  should be at the same level.
 2)Both the nodes  should not have the same parent.
 
 Another new concept that I came across in this  problem is use of AtomicInteger for the purpose of Java not allowing pass by refernce.
 
 We've used recursive approach here and the time complexity is O(n). */
 
 
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        AtomicInteger dx= new AtomicInteger(-1);
        AtomicInteger dy= new AtomicInteger(-1);
        AtomicInteger px= new AtomicInteger();
        AtomicInteger py= new AtomicInteger();
        depthParent(root, x, y, 0, dx, dy, px, py);  
        return ((dx.get()==dy.get()) && (px.get()!=py.get()));
        
    }
    
    void depthParent(TreeNode root, int x, int y,int d, AtomicInteger dx,               AtomicInteger dy, AtomicInteger px, AtomicInteger py){
        
        if(root==null) return;
        if(root.left!=null){
            if(root.left.val==x){
                px.set(root.val);
                dx.set(d+1);    
            }
            else if(root.left.val==y){
                py.set(root.val);
                dy.set(d+1);
            }
        }
        
        if(root.right!=null){
            if(root.right.val==x){
                px.set(root.val);
                dx.set(d+1);    
            }
            else if(root.right.val==y){
                py.set(root.val);
                dy.set(d+1);
            }
        }
        if(dx.get()!=-1 && dy.get()!=-1) return;
        depthParent(root.left, x, y, d+1, dx, dy, px, py);
        depthParent(root.right, x, y, d+1, dx, dy, px, py);
    }
}

